nv_training_personas <- nv_training_personas %>% mutate(jefe_hogar = ifelse(P6050 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(hijo = ifelse(P6050 == 3, 1, 0))
#variable si el jefe del hogar es mujer
nv_training_personas <- nv_training_personas %>% mutate(jefe_hogar_mujer = jefe_hogar*mujer)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), mean, na.rm = TRUE)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), min, na.rm = TRUE)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), max, na.rm = TRUE)
nv_training_personas %>% subset(P6210 == 2) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 3) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 4) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 5) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 6) %>% select(P6210s1) %>% table()
nv_training_personas <- nv_training_personas %>% mutate(P6210s1 = ifelse(P6210 == 4 & P6210s1 == 0, 5, P6210s1))
nv_training_personas <- nv_training_personas %>% mutate(edu = case_when(P6210 == 1 ~ 0,P6210 == 2 ~ P6210s1,P6210 == 3 ~ P6210s1 + 1,P6210 == 4 ~ P6210s1 + 1,P6210 == 5 ~ P6210s1 + 1,P6210 == 6 ~ P6210s1 + 1, P6210 == 7 ~ P6210s1 + 1,P6210 == 8 ~ P6210s1 + 1,P6210 == 9 ~ P6210s1 + 1,P6210 == 10 ~ P6210s1 + 1))
#Frente a las variables de trabajo u otros ingresos, se realizan los siguientes cambios:
nv_training_personas <- nv_training_personas %>% mutate(trabajo_formal = ifelse(P6920 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(segundo_trabajo = ifelse(P7040 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(arriendos = ifelse(P7495 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(pensiones = ifelse(P7500s2 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(pension_alimenticia = ifelse(P7500s3 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos = ifelse(P7505 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_pais = ifelse(P7510s1 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_otros_paises = ifelse(P7510s2 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_instituciones = ifelse(P7510s3 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(otras_ganancias = ifelse(P7510s5 == 1, 1, 0))
# Se agrupa la información de la base personas por hogar para unirla con la base de hogar
nv_training_hogares1 <-nv_training_personas %>% group_by(id) %>% summarize(Nro_mujeres=sum(mujer,na.rm = TRUE),
edad_promedio=mean(P6040,na.rm = TRUE),jefe_hogar_mujer=sum(jefe_hogar_mujer,na.rm = TRUE),
Nro_hijos=sum(hijo,na.rm = TRUE),Nro_personas_trabajo_formal=sum(P6090,na.rm = TRUE),
edu_promedio=mean(edu,na.rm = TRUE),Nro_personas_subsidio_familiar=sum(P6585s3,na.rm = TRUE),
horas_trabajadas_promedio=mean(P6800,na.rm = TRUE),Nro_personas_empleo_propio=sum(P6870,na.rm = TRUE),
Nro_personas_trabajo_formal=sum(trabajo_formal,na.rm = TRUE),Nro_personas_segundo_trabajo=sum(segundo_trabajo,na.rm = TRUE),
Nro_personas_arriendos=sum(arriendos,na.rm = TRUE),Nro_personas_pensiones=sum(pensiones,na.rm = TRUE),
Nro_personas_pension_alimenticia=sum(pension_alimenticia,na.rm = TRUE),Nro_personas_otros_ingresos=sum(otros_ingresos,na.rm = TRUE),
Nro_personas_otros_ingresos_pais=sum(otros_ingresos_pais,na.rm = TRUE),Nro_personas_otros_ingresos_otros_paises=sum(otros_ingresos_otros_paises,na.rm = TRUE),
Nro_personas_otros_ingresos_instituciones=sum(otros_ingresos_instituciones,na.rm = TRUE), Nro_personas_otras_ganancias=sum(otras_ganancias,na.rm = TRUE),
Nro_personas_PET=sum(Pet,na.rm = TRUE),Nro_personas_ocupadas=sum(Oc,na.rm = TRUE), Nro_personas_desempleadas=sum(Des,na.rm = TRUE),
Nro_personas_inactivas=sum(Ina,na.rm = TRUE))
summary(nv_training_hogares)
summary(nv_training_personas)
## Se unen las bases de datos:
nv_training_hogares_VF <- left_join(nv_training_hogares, nv_training_hogares1)
saveRDS(nv_training_hogares_VF, file = "nv_training_hogares_VF.rds")
colnames (nv_training_hogares_VF)
summary(nv_training_hogares_VF)
View(nv_training_hogares_VF)
saveRDS(nv_training_hogares_VF, file = "nv_training_hogares_VF.rds")
str(nv_training_hogares_VF)
colnames(df_test_hogares)
colnames(df_training_hogares)
# comparar los nombres de las variables
diff_variables <- setdiff(names(df_training_hogares), names(df_test_hogares))
diff_variables <- diff_variables[diff_variables != "Pobre"]
# imprimir las variables diferentes
print(diff_variables) #variables que estan en training y no en test
#analizamos las variables presentes en ambas bases
#para hogares
colnames(df_test_personas)
colnames(df_training_personas)
# comparar los nombres de las variables menos la variable pobre
diff_variables_p <- setdiff(names(df_training_personas), names(df_test_personas))
# imprimir las variables diferentes
print(diff_variables_p) #variables que estan en training y no en test
#creamos una nueva base de training menos las variables diferentes
nv_training_hogares <- df_training_hogares%>%select(-all_of(diff_variables))
#realizamos el mismo proceso para la base de training de personas
nv_training_personas<- df_training_personas %>% select(-all_of(diff_variables_p))
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
install.packages("pacman")
df_training_hogares <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/df_training_hogares.rds")
df_training_personas <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/df_training_personas.rds")
df_test_hogares <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/df_test_hogares.rds")
df_test_personas <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/df_test_personas.rds")
# comparar los nombres de las variables
diff_variables <- setdiff(names(df_training_hogares), names(df_test_hogares))
diff_variables <- diff_variables[diff_variables != "Pobre"]
# imprimir las variables diferentes
print(diff_variables) #variables que estan en training y no en test
#analizamos las variables presentes en ambas bases
#para hogares
colnames(df_test_personas)
colnames(df_training_personas)
# comparar los nombres de las variables menos la variable pobre
diff_variables_p <- setdiff(names(df_training_personas), names(df_test_personas))
# imprimir las variables diferentes
print(diff_variables_p) #variables que estan en training y no en test
#creamos una nueva base de training menos las variables diferentes
nv_training_hogares <- df_training_hogares%>%select(-all_of(diff_variables))
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
# comparar los nombres de las variables
diff_variables <- setdiff(names(df_training_hogares), names(df_test_hogares))
diff_variables <- diff_variables[diff_variables != "Pobre"]
# imprimir las variables diferentes
print(diff_variables) #variables que estan en training y no en test
#analizamos las variables presentes en ambas bases
#para hogares
colnames(df_test_personas)
colnames(df_training_personas)
# comparar los nombres de las variables menos la variable pobre
diff_variables_p <- setdiff(names(df_training_personas), names(df_test_personas))
# imprimir las variables diferentes
print(diff_variables_p) #variables que estan en training y no en test
#creamos una nueva base de training menos las variables diferentes
nv_training_hogares <- df_training_hogares%>%select(-all_of(diff_variables))
#realizamos el mismo proceso para la base de training de personas
nv_training_personas<- df_training_personas %>% select(-all_of(diff_variables_p))
#en este punto tenemos las mismas variables en ambas bases tanto para training como para test personas y hogares
#variable categorica tipo de vivienda
nv_training_hogares <- nv_training_hogares %>% mutate (tipo_vivienda=factor(P5090,levels=c(1, 2, 3, 4, 5, 6)))
#variable número de cuarto
nv_training_hogares <- nv_training_hogares %>% mutate (Nro_cuartos = P5000)
#variable número de personas por cuartos
nv_training_hogares <- nv_training_hogares %>% mutate (Nro_personas_cuartos = Nper/P5010)
#variable cuota ¿cuanto paga de cuota de amortización mesualmente?
nv_training_hogares <- nv_training_hogares %>% mutate (cuota_amortizacion = P5100)
#variable ¿cuanto paga de arriendo mesualmente?
nv_training_hogares <- nv_training_hogares %>% mutate (arriendo = P5140)
# Frente a la base de datos de personas y sus  variables de sexo, jefe de hogar y nivel educativo alcanzado, se realizan los siguientes cambios:
#variable mujer 1 si es mujer 0 en otros caos
nv_training_personas <- nv_training_personas %>% mutate(mujer = ifelse(P6020 == 0, 1, 0))
#variable categorica, parenteszo jefe del hogar
nv_training_personas <- nv_training_personas %>% mutate(jefe_hogar = ifelse(P6050 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(hijo = ifelse(P6050 == 3, 1, 0))
#variable si el jefe del hogar es mujer
nv_training_personas <- nv_training_personas %>% mutate(jefe_hogar_mujer = jefe_hogar*mujer)
# Variable categórica de educación:
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), mean, na.rm = TRUE)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), min, na.rm = TRUE)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), max, na.rm = TRUE)
nv_training_personas %>% subset(P6210 == 2) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 3) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 4) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 5) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 6) %>% select(P6210s1) %>% table()
nv_training_personas <- nv_training_personas %>% mutate(P6210s1 = ifelse(P6210 == 4 & P6210s1 == 0, 5, P6210s1))
nv_training_personas <- nv_training_personas %>% mutate(edu = case_when(P6210 == 1 ~ 0,P6210 == 2 ~ P6210s1,P6210 == 3 ~ P6210s1 + 1,P6210 == 4 ~ P6210s1 + 1,P6210 == 5 ~ P6210s1 + 1,P6210 == 6 ~ P6210s1 + 1, P6210 == 7 ~ P6210s1 + 1,P6210 == 8 ~ P6210s1 + 1,P6210 == 9 ~ P6210s1 + 1,P6210 == 10 ~ P6210s1 + 1))
#Frente a las variables de trabajo u otros ingresos, se realizan los siguientes cambios:
#Variable categorica trabajo_formal
nv_training_personas <- nv_training_personas %>% mutate(trabajo_formal = ifelse(P6920 == 1, 1, 0))
# Variable categórica de segundo trabajo 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(segundo_trabajo = ifelse(P7040 == 1, 1, 0))
# Variable categórica de pagos por arriendo 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(arriendos = ifelse(P7495 == 1, 1, 0))
# Variable categórica de pagos por pensión 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(pensiones = ifelse(P7500s2 == 1, 1, 0))
# Variable categórica de pagos por pensión alimentaria 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(pension_alimenticia = ifelse(P7500s3 == 1, 1, 0))
# Variable categórica de pagos por otros ingresos 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos = ifelse(P7505 == 1, 1, 0))
# Variable categórica de pagos por envios de dinero dentro del país 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_pais = ifelse(P7510s1 == 1, 1, 0))
# Variable categórica de pagos por concepto de remesas 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_otros_paises = ifelse(P7510s2 == 1, 1, 0))
# Variable categórica de pagos por otros ingresos provenientes de otras instituciones 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_instituciones = ifelse(P7510s3 == 1, 1, 0))
# Variable categórica de pagos por otras ganancias 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otras_ganancias = ifelse(P7510s5 == 1, 1, 0))
# Se agrupa la información de la base personas por hogar para unirla con la base de hogar
nv_training_hogares1 <-nv_training_personas %>% group_by(id) %>% summarize(Nro_mujeres=sum(mujer,na.rm = TRUE),
edad_promedio=mean(P6040,na.rm = TRUE),jefe_hogar_mujer=sum(jefe_hogar_mujer,na.rm = TRUE),
Nro_hijos=sum(hijo,na.rm = TRUE),Nro_personas_trabajo_formal=sum(P6090,na.rm = TRUE),
edu_promedio=mean(edu,na.rm = TRUE),Nro_personas_subsidio_familiar=sum(P6585s3,na.rm = TRUE),
horas_trabajadas_promedio=mean(P6800,na.rm = TRUE),Nro_personas_empleo_propio=sum(P6870,na.rm = TRUE),
Nro_personas_trabajo_formal=sum(trabajo_formal,na.rm = TRUE),Nro_personas_segundo_trabajo=sum(segundo_trabajo,na.rm = TRUE),
Nro_personas_arriendos=sum(arriendos,na.rm = TRUE),Nro_personas_pensiones=sum(pensiones,na.rm = TRUE),
Nro_personas_pension_alimenticia=sum(pension_alimenticia,na.rm = TRUE),Nro_personas_otros_ingresos=sum(otros_ingresos,na.rm = TRUE),
Nro_personas_otros_ingresos_pais=sum(otros_ingresos_pais,na.rm = TRUE),Nro_personas_otros_ingresos_otros_paises=sum(otros_ingresos_otros_paises,na.rm = TRUE),
Nro_personas_otros_ingresos_instituciones=sum(otros_ingresos_instituciones,na.rm = TRUE), Nro_personas_otras_ganancias=sum(otras_ganancias,na.rm = TRUE),
Nro_personas_PET=sum(Pet,na.rm = TRUE),Nro_personas_ocupadas=sum(Oc,na.rm = TRUE), Nro_personas_desempleadas=sum(Des,na.rm = TRUE),
Nro_personas_inactivas=sum(Ina,na.rm = TRUE))
summary(nv_training_hogares)
summary(nv_training_personas)
## Se unen las bases de datos:
nv_training_hogares_VF <- left_join(nv_training_hogares, nv_training_hogares1)
saveRDS(nv_training_hogares_VF, file = "nv_training_hogares_VF.rds")
colnames (nv_training_hogares_VF)
summary(nv_training_hogares_VF)
str(nv_training_hogares_VF)
saveRDS(nv_training_hogares_VF, file = "nv_training_hogares_VF.rds")
View(nv_training_hogares_VF)
df_training_personas <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/df_training_personas.rds")
View(df_training_personas)
View(nv_training_hogares1)
#variable mujer 1 si es mujer 0 en otros caos
nv_training_personas <- nv_training_personas %>% mutate(mujer = ifelse(P6020 == 0, 1, 0))
#variable mujer 1 si es mujer 0 en otros caos
nv_training_personas <- nv_training_personas %>% mutate(mujer = ifelse(P6020 == 0, 1, 0))
View(nv_training_personas)
nv_training_personas <- nv_training_personas %>% mutate(mujer = ifelse(P6020 == 2, 1, 0))
#variable categorica tipo de vivienda
nv_training_hogares <- nv_training_hogares %>% mutate (tipo_vivienda=factor(P5090,levels=c(1, 2, 3, 4, 5, 6)))
#variable número de cuarto
nv_training_hogares <- nv_training_hogares %>% mutate (Nro_cuartos = P5000)
#variable número de personas por cuartos
nv_training_hogares <- nv_training_hogares %>% mutate (Nro_personas_cuartos = Nper/P5010)
#variable cuota ¿cuanto paga de cuota de amortización mesualmente?
nv_training_hogares <- nv_training_hogares %>% mutate (cuota_amortizacion = P5100)
#variable ¿cuanto paga de arriendo mesualmente?
nv_training_hogares <- nv_training_hogares %>% mutate (arriendo = P5140)
# Frente a la base de datos de personas y sus  variables de sexo, jefe de hogar y nivel educativo alcanzado, se realizan los siguientes cambios:
#variable mujer 1 si es mujer 0 en otros caos
nv_training_personas <- nv_training_personas %>% mutate(mujer = ifelse(P6020 == 2, 1, 0))
#variable categorica, parenteszo jefe del hogar
nv_training_personas <- nv_training_personas %>% mutate(jefe_hogar = ifelse(P6050 == 1, 1, 0))
nv_training_personas <- nv_training_personas %>% mutate(hijo = ifelse(P6050 == 3, 1, 0))
#variable si el jefe del hogar es mujer
nv_training_personas <- nv_training_personas %>% mutate(jefe_hogar_mujer = jefe_hogar*mujer)
# Variable categórica de educación:
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), mean, na.rm = TRUE)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), min, na.rm = TRUE)
aggregate(nv_training_personas$P6210s1, by = list(nv_training_personas$P6210), max, na.rm = TRUE)
nv_training_personas %>% subset(P6210 == 2) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 3) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 4) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 5) %>% select(P6210s1) %>% table()
nv_training_personas %>% subset(P6210 == 6) %>% select(P6210s1) %>% table()
nv_training_personas <- nv_training_personas %>% mutate(P6210s1 = ifelse(P6210 == 4 & P6210s1 == 0, 5, P6210s1))
nv_training_personas <- nv_training_personas %>% mutate(edu = case_when(P6210 == 1 ~ 0,P6210 == 2 ~ P6210s1,P6210 == 3 ~ P6210s1 + 1,P6210 == 4 ~ P6210s1 + 1,P6210 == 5 ~ P6210s1 + 1,P6210 == 6 ~ P6210s1 + 1, P6210 == 7 ~ P6210s1 + 1,P6210 == 8 ~ P6210s1 + 1,P6210 == 9 ~ P6210s1 + 1,P6210 == 10 ~ P6210s1 + 1))
#Frente a las variables de trabajo u otros ingresos, se realizan los siguientes cambios:
#Variable categorica trabajo_formal
nv_training_personas <- nv_training_personas %>% mutate(trabajo_formal = ifelse(P6920 == 1, 1, 0))
# Variable categórica de segundo trabajo 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(segundo_trabajo = ifelse(P7040 == 1, 1, 0))
# Variable categórica de pagos por arriendo 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(arriendos = ifelse(P7495 == 1, 1, 0))
# Variable categórica de pagos por pensión 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(pensiones = ifelse(P7500s2 == 1, 1, 0))
# Variable categórica de pagos por pensión alimentaria 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(pension_alimenticia = ifelse(P7500s3 == 1, 1, 0))
# Variable categórica de pagos por otros ingresos 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos = ifelse(P7505 == 1, 1, 0))
# Variable categórica de pagos por envios de dinero dentro del país 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_pais = ifelse(P7510s1 == 1, 1, 0))
# Variable categórica de pagos por concepto de remesas 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_otros_paises = ifelse(P7510s2 == 1, 1, 0))
# Variable categórica de pagos por otros ingresos provenientes de otras instituciones 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otros_ingresos_instituciones = ifelse(P7510s3 == 1, 1, 0))
# Variable categórica de pagos por otras ganancias 1 si 0 no
nv_training_personas <- nv_training_personas %>% mutate(otras_ganancias = ifelse(P7510s5 == 1, 1, 0))
# Se agrupa la información de la base personas por hogar para unirla con la base de hogar
nv_training_hogares1 <-nv_training_personas %>% group_by(id) %>% summarize(Nro_mujeres=sum(mujer,na.rm = TRUE),
edad_promedio=mean(P6040,na.rm = TRUE),jefe_hogar_mujer=sum(jefe_hogar_mujer,na.rm = TRUE),
Nro_hijos=sum(hijo,na.rm = TRUE),Nro_personas_trabajo_formal=sum(P6090,na.rm = TRUE),
edu_promedio=mean(edu,na.rm = TRUE),Nro_personas_subsidio_familiar=sum(P6585s3,na.rm = TRUE),
horas_trabajadas_promedio=mean(P6800,na.rm = TRUE),Nro_personas_empleo_propio=sum(P6870,na.rm = TRUE),
Nro_personas_trabajo_formal=sum(trabajo_formal,na.rm = TRUE),Nro_personas_segundo_trabajo=sum(segundo_trabajo,na.rm = TRUE),
Nro_personas_arriendos=sum(arriendos,na.rm = TRUE),Nro_personas_pensiones=sum(pensiones,na.rm = TRUE),
Nro_personas_pension_alimenticia=sum(pension_alimenticia,na.rm = TRUE),Nro_personas_otros_ingresos=sum(otros_ingresos,na.rm = TRUE),
Nro_personas_otros_ingresos_pais=sum(otros_ingresos_pais,na.rm = TRUE),Nro_personas_otros_ingresos_otros_paises=sum(otros_ingresos_otros_paises,na.rm = TRUE),
Nro_personas_otros_ingresos_instituciones=sum(otros_ingresos_instituciones,na.rm = TRUE), Nro_personas_otras_ganancias=sum(otras_ganancias,na.rm = TRUE),
Nro_personas_PET=sum(Pet,na.rm = TRUE),Nro_personas_ocupadas=sum(Oc,na.rm = TRUE), Nro_personas_desempleadas=sum(Des,na.rm = TRUE),
Nro_personas_inactivas=sum(Ina,na.rm = TRUE))
summary(nv_training_hogares)
summary(nv_training_personas)
## Se unen las bases de datos:
nv_training_hogares_VF <- left_join(nv_training_hogares, nv_training_hogares1)
saveRDS(nv_training_hogares_VF, file = "nv_training_hogares_VF.rds")
colnames(test)
glimpse(training)
nv_test_sinna <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/nv_test_sinna.rds")
nv_training_sinna <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/nv_training_sinna.rds")
#ANALISIS DE VARIABLES####
# comparar los nombres de las variables
diff_variables <- setdiff(names(training), names(test))
diff_variables <- setdiff(names(nv_training_sinna), names(nv_test_sinna))
print(diff_variables)
#analisis de los datos####
glimpse(nv_training_sinna)
glimpse(nv_test_sinna)
table(nv_training_sinna$Pobre)
prop.table(table(nv_training_sinna$Pobre))
#para training
nv_training_sinna<- nv_training_sinna %>%
mutate(P5090 = factor(P5090),
Dominio = factor(Dominio),
Clase = ifelse(Clase == 2, 0, Clase),
Depto = factor(Depto),
tipo_vivienda= factor(tipo_vivienda))
#para test
nv_test_sinna<- nv_test_sinna %>%
mutate(P5090 = factor(P5090),
Dominio = factor(Dominio),
Clase = ifelse(Clase == 2, 0, Clase),
Depto = factor(Depto),
tipo_vivienda= factor(tipo_vivienda))
# Dummyficamos ####
dumificador <- dummyVars(formula = ~ ., data = nv_training_sinna, fullRank = T)
p_load(caret)
dumificador <- dummyVars(formula = ~ ., data = nv_training_sinna, fullRank = T)
dumificador <- dummyVars(formula = ~ ., data = nv_training_sinna, fullRank = T)
db_train <- predict(dumificador, newdata = nv_training_sinna)
#ANALISIS DE VARIABLES####
# comparar los nombres de las variables
diff_variables <- setdiff(names(nv_training_sinna), names(nv_test_sinna))
# imprimir las variables diferentes
print(diff_variables)
#ambas bases presentan las mimas variables eceptuando pobre
#analisis de los datos####
glimpse(nv_training_sinna)
glimpse(nv_test_sinna)
#analizamos la distribución de la pobreza en nuestra base training
table(nv_training_sinna$Pobre)
prop.table(table(nv_training_sinna$Pobre))
#encontramos un desvalance moderado de la base con un porcentaje del 20% de la clase minoritaria (pobre)
#seeleccionamos nuestras variables categoricas y dummificamos####
#para training
nv_training_sinna<- nv_training_sinna %>%
mutate(P5090 = factor(P5090),
Dominio = factor(Dominio),
Clase = ifelse(Clase == 2, 0, Clase),
Depto = factor(Depto),
tipo_vivienda= factor(tipo_vivienda))
#para test
nv_test_sinna<- nv_test_sinna %>%
mutate(P5090 = factor(P5090),
Dominio = factor(Dominio),
Clase = ifelse(Clase == 2, 0, Clase),
Depto = factor(Depto),
tipo_vivienda= factor(tipo_vivienda))
p_load(caret)
# Dummyficamos ####
dumificador <- dummyVars(formula = ~ ., data = nv_training_sinna, fullRank = T)
db_train <- predict(dumificador, newdata = nv_training_sinna)
nv_test_sinna <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/nv_test_sinna.rds")
nv_training_sinna <- readRDS("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE/nv_training_sinna.rds")
#para training
nv_training_sinna<- nv_training_sinna %>%
mutate(P5090 = factor(P5090),
Dominio = factor(Dominio),
Clase = ifelse(Clase == 2, 0, Clase),
Depto = factor(Depto),
tipo_vivienda= factor(tipo_vivienda))
#para test
nv_test_sinna<- nv_test_sinna %>%
mutate(P5090 = factor(P5090),
Dominio = factor(Dominio),
Clase = ifelse(Clase == 2, 0, Clase),
Depto = factor(Depto),
tipo_vivienda= factor(tipo_vivienda))
p_load(caret)
# Dummyficamos ####
dumificador <- dummyVars(formula = ~ ., data = nv_training_sinna, fullRank = T)
db_train <- predict(dumificador, newdata = nv_training_sinna)
View(nv_test_sinna)
View(nv_test_sinna)
View(nv_training_sinna)
help Error: vector memory exhausted (limit reached?)
install.packages("pacman")
install.packages("mice")
require(pacman)
require(mice)
library(caret)
p_load(fancyRpartPlot,tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary,sf,leaflet,tmaptools,osmdata,nngeo,rgeos,rnaturalearth,dplyr)
#cargamos nuestra data
setwd('..')
setwd('3. STORE')
df_con_variables <- readRDS("df_con_variables.rds")
#analizamos las variables que contienen na  ####
names(df_con_variables)[sapply(df_con_variables, function(x) any(is.na(x)))]
#analisis de porcentaje de na
na_pct <- sapply(df_con_variables, function(x) mean(is.na(x)))*100
result <- data.frame(variable = names(df_con_variables), na_pct = na_pct)
result[result$na_pct > 0,]
#analisis de cantidad de na
na_count <- sapply(df_con_variables, function(x) sum(is.na(x)))
result <- data.frame(variable = names(df_con_variables), na_count = na_count)
result[result$na_count > 0,]
#BAÃOS ####
# Extract bathroom information as character string
bathroom_str <- str_extract(df_con_variables$description, "(?i)(\\d+)\\s*(bano|banos|banios|banio|baio|baios)\\b|(?i)\\b(bano|banos|banios|banio|baio|baios)\\b\\s*(\\d+)")
# Clean and convert string to numeric
bathroomsc <- as.numeric(gsub("(?i)\\b(bano|banos|banios|banio|baio|baios)\\b|\\s", "", bathroom_str, ignore.case = TRUE))
table(bathroomsc)
# reemplazamos los na de la variable bathroom con los datos extraÃ­dos
data <- data_frame(df_con_variables) #analizar la conversiÃ³nde data frame
data$bathrooms <- ifelse(is.na(data$bathrooms), bathroomsc, data$bathrooms)
sum(is.na(data$bathrooms))
# se reemplazaron 4214 na con los datos de descripcciÃ³n
# Convertir valores atÃ­picos en NAs
data$bathrooms<- ifelse(data$bathrooms > 15, NA, data$bathrooms)
# Verificar que los valores atÃ­picos hayan sido convertidos a NAs
sum(is.na(data$bathrooms))
# Calcular el promedio de baÃ±os para apartamentos y casas
mean_bath_apto <- round(mean(data$bathrooms[data$property_type == "Apartamento"], na.rm = TRUE))
mean_bath_casa <- round(mean(data$bathrooms[data$property_type == "Casa"], na.rm = TRUE))
# Reemplazar los NA en funciÃ³n de property_type
data$bathrooms <- ifelse(
is.na(data$bathrooms) & data$property_type == "Apartamento",
mean_bath_apto,
ifelse(
is.na(data$bathrooms) & data$property_type == "Casa",
mean_bath_casa,
data$bathrooms
)
)
# Redondear la variable bathrooms a nÃºmeros enteros
data$bathrooms <- round(data$bathrooms)
# Verificar que se hayan reemplazado los NA correctamente
sum(is.na(data$bathrooms))
#surface_total ####
# Extract total surface information as character strings
surface_str <- str_extract(df_con_variables$description, "(?i)(\\d+)\\s*(mts2|mts|metros|metroscuadrados|m2|metros2|mcuadrados|mecuadrado|metro)\\b|(?i)\\b(mts2|mts|metros|metroscuadrados|m2|metros2|mcuadrados|mecuadrado|metro)\\b\\s*(\\d+)")
# Clean and convert strings to numeric
total_surface <- as.numeric(gsub("(?i)\\b(mts2|mts|metros|metroscuadrados|m2|metros2|mcuadrados|mecuadrado|metro)\\b|\\s", "", surface_str, ignore.case = TRUE))
# Replace NAs in 'total_surface' variable with the extracted data
data$surface_total<- ifelse(is.na(data$surface_total), total_surface, data$surface_total)
sum(is.na(data$surface_total))
# se reemplazaron 12047 na
#suponemos que algunos na son debido a que el surface covered es igual a surface total
data$surface_total <- ifelse(is.na(data$surface_total), data$surface_covered, data$surface_total)
# quitamos atipicos en area
data$surface_total[data$property_type == "Apartamento" & data$surface_total > 30000] <- NA
data$surface_total[data$property_type == "Apartamento" & data$surface_total < 36] <- NA
data$surface_total[data$property_type == "Apartamento" & data$surface_total < 45 & data$bedrooms > 1] <- NA
data$surface_total[data$property_type == "Casa" & data$surface_total < 50] <- NA
##Usamos vecinos cercanos para los datos faltantes, pero primero creamos grupos con knn
# Extraer las coordenadas de los puntos
coords <- st_coordinates(data$geometry)
# Aplicar k-means para crear 10 grupos
set.seed(123) # para reproducibilidad de resultados
kmeans_output <- kmeans(coords, centers = 200)
# Agregar la columna "group" al data frame "df" con la asignación de grupo para cada punto
data <- data %>% mutate(grupo = kmeans_output$cluster)
data$grupo <- as.factor(data$grupo)
data_imputacion<-data %>%select("grupo", "bathrooms", "bedrooms", "rooms", "surface_total", "year")
###### Crear un objeto mice para realizar la imputación #####
# Definir el método de imputación para cada columna
# Crear un objeto mice para realizar la imputación
imp <- mice(data_imputacion,m=5,maxit=50,meth='pmm',seed=500)
completedData <- complete(imp,1)
# Reemplazar los valores de data con los valores de completedData
data$grupo <- completedData$grupo
data$bedrooms <- completedData$bedrooms
data$rooms <- completedData$rooms
data$surface_total <- completedData$surface_total
data$year <- as.factor(data$year)
data$property_type <- as.factor(data$property_type)
data$parking <- as.factor(data$parking)
data$Garaje <- as.factor(data$Garaje)
data$Terraza <- as.factor(data$Terraza)
data$grupo <- as.factor(data$grupo)
##Quitamos las variables que no necesitamos
data_final <- data %>%select(-month,-city,-surface_covered,-description,-operation_type,-title,-geometry)
train <- data_final[complete.cases(data_final$price), ]
test  <- data_final[is.na(data_final$price), ]
train <- train %>% select(-property_id)
################prueba
# Definimos los valores del grid de hiperparámetros
param_grid <- expand.grid(alpha = seq(0, 1, length = 20)
,lambda = c(0, 0.001, 0.01, 0.1, 1, 10))
# Crea un modelo base con los hiperparámetros predeterminados
base_model <- train(price ~ ., data = train, method = "glmnet")
# Especifica el método de validación cruzada
ctrl <- trainControl(method = "cv", number = 10)
# Realiza la búsqueda en la grilla de hiperparámetros
model <- train(price ~ .,
data = train, method = "glmnet",
trControl = ctrl,
tuneGrid = param_grid,
preProcess = c("center", "scale"),
metric = "RMSE")
model
predictions <- predict(model, newdata = test)
# Unir id con predicciones en un nuevo dataframe
df_test <- import("test.csv")
results <- data.frame(property_id = df_test$property_id, price = predictions)
# Exportar a csv
write.csv(results, "predicciones_regresion_lineal.csv", row.names = FALSE)
grilla <- expand.grid(mtry = c(4,7,12),
splitrule= "variance",
min.node.size =c(10,30,100))
cv8 <- trainControl(number = 8, method = "cv")
modelob <- train(price~.,
data=train,
trControl= cv8,
metric ="RMSE",
tuneGrid=grilla,
method = "ranger")
View(model)
modelob
ggplot(modelob$results, aes(x = min.node.size, y = RMSE,
color = as.factor(mtry))) +
geom_line() +
geom_point() +
labs(title = "Resultados del grid search",
x = "Mínima cantidad de observaciones por hoja",
y = "RMSE (Cross-Validation)") +
scale_color_discrete("Número de predictores seleccionados al azar") +
theme_bw() +
theme(legend.position = "bottom")
y_hat_insample2 = predict(modelob, newdata = test)
df_test <- import("test.csv")
results <- data.frame(property_id = df_test$property_id, price = y_hat_insample2)
# Exportar a csv
write.csv(results, "predicciones_con_data2.csv", row.names = FALSE)
View(results)
coef(model$finalModel)
coef(predict(model$finalModel, s = 0.01, type = "coef"))
best_model <- results$bestTune  # Obtener los hiperparámetros del mejor modelo
rmse_values <- results$results$RMSE  # Obtener los valores de RMSE de todos los modelos
index <- which.min(rmse_values)  # Encontrar el índice del modelo con el menor RMSE
model_with_lowest_rmse <- results$finalModel[index]  # Seleccionar el modelo con el menor RMSE
coef(model_with_lowest_rmse)
best_model <- results$bestTune  # Obtener los hiperparámetros del mejor modelo
model_with_lowest_rmse <- getModelInfo(model$method)[[1]]$fit(model, best_model$)  # Seleccionar el modelo con el menor RMSE
coef(model_with_lowest_rmse$finalModel, model_with_lowest_rmse$bestTune$lambda)
results$bestTune  # Obtener los hiperparámetros del mejor modelo
model
